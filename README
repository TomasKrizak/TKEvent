In case this README is missing some important information or is unclear do not hesitate to conact me (Tomáš Křižák) on slack or email - tomas.krizak@cvut.cz

=============================================================================
	DATA STRUCTURE: 
=============================================================================

TKEvent is a library made specifically as a tool for development of tracking algorithm however it can do more than that. Class TKEvent extracts most important information about given event and stores them in vectors of smaller objects:
	vector of OM hits (TKOHhit),
	vector of tracker cell hits (TKTrhit),
	vector of tracks (TKtrack).
In constrast to RED format these classes can contain some processed information like:
	x,y,z coordinates of tracker cell hits (calculated from timestamps and cell number)
	radii of tracker cell hits (you can switch drift models)
	x,y,z coordinates of OM hits
These values need to be taken carefully as they might be improved in the future and are not in their final state yet. 

It also contains information about geometry of the detector given by a series of constants which might differ from the reality - must be taken with care (work in progress)

============================================================================= 
	TRACK RECONSTRUCTION:
=============================================================================

The reconstruction itself is based on Legendre transform. At the moment there are two distinct versions:
	1. reconstruct_track:
	The original version. It finds only one best possible track for each side of the tracker (if the side has at least 3 usable hits - usable means not missing timestamp t0 and has a radius smaller than 35mm). Does not include uncertainties. Can return very bad results but is really fast and can act as a good tool for filtering special events. This version has a variant 'reconstruct_track_from_hits' which is the same but it can take as input a vector of tracker hits of your choice and do the reconstruction on these hits.
	
	2. reconstruct_multi:
	Upgraded version. It is much slower then 1. but searches for more possible candidates for tracks. The search invovles uncertainties (Gauss distribution with sigma = 2mm at the moment). 
	
The track is described by four parameters a,b,c,d in form:
	y = ax + b
	z = cx + d
	(x,y,z coordinates corespond to Falaise, origin in center of detector)
	(the parametrization will probably be redefined in the future to include special cases)


=============================================================================
	VISUALIZATION:
=============================================================================

TKEvent has two visualization options:
	1. Top projection - calling a function 'make_top_projection()' on obejct TKEvent (given event) creates and saves png picture of the detector from above with highlighted OM hits and tracker cells hits. If tracks were calculated in this event then it depicts them too.
	2. 3D visualization - calling a function 'build_event()' on obejct TKEvent creates and saves a root file called 'Run-XXX_event-XXX_3D.root' in '/ANAlYSIS_MACROS/Events_visu/' folder. This stores all basic detector geometry as root geometry objects. Can be then visualized using visu.cpp skript.
	
=============================================================================
	USAGE:
=============================================================================

Class TKEvent can be used in two ways: 
	1. online on cluster (installation steps 1 - 3)
		- requires installing TKEvent library on your cluster
		- includes RED_to_root converter needed for option 2
		
	2. offline on your device (optional but very practical) (installation steps 4 - )
		- requires: installing TKEvent library and RED_to_root converter on cluster,
			    installing TKEvent library on your device,
			    converted data on your device

=============================================================================
	INSTALLATION:
=============================================================================

	1. git clone TKEvent on your cluster environment	
		$ git clone https://github.com/TomasKrizak/TKEvent.git
	
	2. source environment:
		$ cd RED_to_TK/
		$ source load_environment.sh
		
	3. install TKEvent libraby on your cluster: 
		$ cd ../TKEvent/
		$ chmod 755 install.sh
		$ ./install.sh
		
	4. install RED to root converter - PATH to TKEvent will be requested:
		$ cd ../RED_to_TK/
		$ chmod 755 install.sh
		$ ./install.sh
	
	

	
	
